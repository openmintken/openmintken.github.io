
import java.awt.Component;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.geom.GeneralPath;
import java.util.Collection;
import javax.swing.JComponent;
import javax.swing.JSlider;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.basic.BasicSliderUI;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 * Eine grafische Darstellung des MINT-Punktezaehlers
 *
 * @author Joana Bergsiek
 * @version 1.3.1
 */
public class GUI extends javax.swing.JFrame {

    private final ArrayList<Aktivitaet> S1 = new ArrayList<>(); //Geltende Aktivitaeten; siehe initialisiereA3S1Combo und jButton1MouseClicked
    private final ArrayList<Aktivitaet> S2 = new ArrayList<>(); //Geltende Aktivitaeten; siehe initialisiereA3S2Combo und jButton1MouseClicked
    private final ArrayList<JComboBox> alleA3S1Boxen = new ArrayList<>();
    private final ArrayList<JComboBox> alleA3S2Boxen = new ArrayList<>();
    private final ArrayList<JSlider> alleA3S1Slider = new ArrayList<>();
    private final ArrayList<JSlider> alleA3S2Slider = new ArrayList<>();
    private final ArrayList<JLabel> alleA3S1Label = new ArrayList<>();
    private final ArrayList<JLabel> alleA3S2Label = new ArrayList<>();
    private final int startanzahlA3Boxen = 6;
    private Zertifikat zer;
    private final int[] reihenindexPuffer = new int[10000]; //siehe reiheHervorheben
    private TableRowSorter<TableModel> rowSorter;
    //Diese Aktivitaeten sind nicht in der S1 absolvierbar
    private final ArrayList<String> keineS1Aktivitaeten = new ArrayList<>();
    //Diese Aktivitaeten sind nicht in der S2 absolvierbar
    private final ArrayList<String> keineS2Aktivitaeten = new ArrayList<>();
    private final int abstandZwischenA3Elementen = 55;

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();

        initialisiereMeineElemente();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jSlider1 = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        jSlider2 = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jMenuBar1 = new BackgroundMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem16 = new javax.swing.JMenuItem();

        jFrame1.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 14)); // NOI18N
        jFrame1.setForeground(java.awt.Color.lightGray);
        jFrame1.setLocation(new java.awt.Point(0, 0));
        jFrame1.setSize(new java.awt.Dimension(200, 200));

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jPopupMenu1.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 10)); // NOI18N

        jMenuItem1.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 10)); // NOI18N
        jMenuItem1.setText("Aktivität SI hinzufügen");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 10)); // NOI18N
        jMenuItem2.setText("Aktivität SII hinzufügen");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);
        jPopupMenu1.add(jSeparator1);

        jMenuItem3.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 10)); // NOI18N
        jMenuItem3.setText("Alle A3-Aktivitäten löschen");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem3);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MINTken Version 1.3.1");
        setLocation(new java.awt.Point(0, 0));
        setResizable(false);
        setSize(new java.awt.Dimension(1280, 780));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Art der Aktivität", "Aktivität", "5 Punkte/ Niveau 1", "10 Punkte/ Niveau 2", "15 Punkte/ Niveau 3"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(204, 204, 204));
        jTable1.setName("Aktivitaetenliste"); // NOI18N
        jTable1.setRequestFocusEnabled(false);
        jTable1.setSelectionBackground(new java.awt.Color(157, 69, 73));
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable1MouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 460, 1280, 240));

        jLabel1.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(93, 157, 69));
        jLabel1.setText("Anforderungsfeld II");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, -1, -1));

        jLabel2.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(157, 69, 73));
        jLabel2.setText("Anforderungsfeld III");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 20, -1, -1));

        jComboBox1.setBackground(new java.awt.Color(69, 127, 157));
        jComboBox1.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 13)); // NOI18N
        jComboBox1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 380, 50));

        jLabel3.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(69, 127, 157));
        jLabel3.setText("Anforderungsfeld I");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jComboBox2.setBackground(new java.awt.Color(93, 157, 69));
        jComboBox2.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 13)); // NOI18N
        jComboBox2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });
        getContentPane().add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, 380, 50));

        jSlider1.setMaximum(3);
        jSlider1.setMinimum(1);
        jSlider1.setValue(1);
        jSlider1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });
        getContentPane().add(jSlider1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 160, -1, -1));

        jLabel4.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(69, 127, 157));
        jLabel4.setText("Niveau: 1");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, -1, -1));

        jSlider2.setMaximum(3);
        jSlider2.setMinimum(1);
        jSlider2.setValue(1);
        jSlider2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jSlider2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider2StateChanged(evt);
            }
        });
        getContentPane().add(jSlider2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 380, -1, -1));

        jLabel5.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(93, 157, 69));
        jLabel5.setText("Niveau: 1");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 380, -1, -1));

        jLabel6.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(157, 69, 73));
        jLabel6.setText("Erledigt in S I");
        jLabel6.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel6.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 38, -1, 30));

        jLabel7.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(157, 69, 73));
        jLabel7.setText("(Mittelstufe)");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(708, 60, -1, -1));

        jLabel8.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(157, 107, 69));
        jLabel8.setText("Erledigt in S II");
        jLabel8.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel8.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(925, 38, -1, -1));

        jLabel9.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(157, 107, 69));
        jLabel9.setText("(Oberstufe)");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(925, 60, -1, -1));

        jLabel11.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 10)); // NOI18N
        jLabel11.setText("Die Länge einer Spalte an den Grenzen im Header verändern. Durch Drag&Drop Spalten verschieben. Durch einen Klick auf eine Spalte Tabelle nach dieser alph. sortieren.");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, -1, -1));

        jButton1.setBackground(new java.awt.Color(255, 255, 153));
        jButton1.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/Auswertungsbutton.png"))); // NOI18N
        jButton1.setToolTipText("Auswertung");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setPreferredSize(new java.awt.Dimension(35, 35));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 20, -1, -1));

        jButton2.setBackground(new java.awt.Color(255, 255, 153));
        jButton2.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/Speicherbutton.png"))); // NOI18N
        jButton2.setToolTipText("Auswertung als Datei speichern ");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setPreferredSize(new java.awt.Dimension(35, 35));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 20, -1, -1));

        jTextField1.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 12)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("Tabelle nach Wörtern filtern...");
        jTextField1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(157, 69, 73), 2, true));
        jTextField1.setPreferredSize(new java.awt.Dimension(260, 24));
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField1FocusGained(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 440, -1, 30));

        jButton7.setBackground(new java.awt.Color(255, 255, 153));
        jButton7.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/Ladebutton.png"))); // NOI18N
        jButton7.setToolTipText("Auswertung aus Datei laden");
        jButton7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton7.setPreferredSize(new java.awt.Dimension(35, 35));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(1210, 20, -1, -1));

        jScrollPane2.setBorder(null);
        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setMinimumSize(new java.awt.Dimension(400, 316));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(400, 316));

        jPanel1.setMinimumSize(new java.awt.Dimension(400, 1340));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jScrollPane2.setViewportView(jPanel1);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 90, 380, -1));

        jScrollPane3.setBorder(null);
        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setMinimumSize(new java.awt.Dimension(400, 316));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(400, 316));

        jPanel2.setMinimumSize(new java.awt.Dimension(400, 1340));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jScrollPane3.setViewportView(jPanel2);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 90, 380, -1));

        jButton8.setBackground(new java.awt.Color(157, 69, 73));
        jButton8.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 14)); // NOI18N
        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/addS1.png"))); // NOI18N
        jButton8.setToolTipText("Auswahlbox für SI hinzufügen");
        jButton8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton8.setPreferredSize(new java.awt.Dimension(40, 30));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(795, 40, 35, 35));

        jButton9.setBackground(new java.awt.Color(157, 107, 69));
        jButton9.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 14)); // NOI18N
        jButton9.setForeground(new java.awt.Color(255, 255, 255));
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/addS2.png"))); // NOI18N
        jButton9.setToolTipText("Auswahlbox für SII hinzufügen");
        jButton9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton9.setPreferredSize(new java.awt.Dimension(40, 30));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 40, 35, 35));

        jLabel10.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 10)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(69, 127, 157));
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 290, -1));

        jLabel12.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 10)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(93, 157, 69));
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 410, 290, -1));

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/removeS1.png"))); // NOI18N
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.setPreferredSize(new java.awt.Dimension(10, 10));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 410, -1, -1));

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/removeS2.png"))); // NOI18N
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton4.setPreferredSize(new java.awt.Dimension(10, 10));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 410, -1, -1));

        jMenuBar1.setBackground(new java.awt.Color(157, 69, 73));
        jMenuBar1.setBorder(null);
        jMenuBar1.setForeground(new java.awt.Color(255, 255, 255));
        jMenuBar1.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 12)); // NOI18N

        jMenu1.setText("Aktionen");
        jMenu1.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 12)); // NOI18N
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jMenu1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jMenu1MouseExited(evt);
            }
        });

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem11.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 12)); // NOI18N
        jMenuItem11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/addS1Men.png"))); // NOI18N
        jMenuItem11.setText("Auswahlbox für SI hinzufügen");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem11);

        jMenuItem12.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem12.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 12)); // NOI18N
        jMenuItem12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/addS2Men.png"))); // NOI18N
        jMenuItem12.setText("Auswahlbox für SII hinzufügen");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem12);

        jMenuItem14.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem14.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 12)); // NOI18N
        jMenuItem14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/removeS1Men.png"))); // NOI18N
        jMenuItem14.setText("Auswahlbox für SI entfernen");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem14);

        jMenuItem15.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem15.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 12)); // NOI18N
        jMenuItem15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/removeS2Men.png"))); // NOI18N
        jMenuItem15.setText("Auswahlbox für SII entfernen");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem15);
        jMenu1.add(jSeparator3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 12)); // NOI18N
        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/AuswertungsbuttonMen.png"))); // NOI18N
        jMenuItem4.setText("Daten auswerten");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 12)); // NOI18N
        jMenuItem5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/SpeicherbuttonMen.png"))); // NOI18N
        jMenuItem5.setText("Auswertung speichern");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 12)); // NOI18N
        jMenuItem6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/LadebuttonMen.png"))); // NOI18N
        jMenuItem6.setText("Auswertung laden");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);
        jMenu1.add(jSeparator4);

        jMenuItem13.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 12)); // NOI18N
        jMenuItem13.setText("Programm beenden");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem13);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Informationen zum Zertifikat");
        jMenu2.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 12)); // NOI18N
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jMenu2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jMenu2MouseExited(evt);
            }
        });

        jMenuItem7.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 12)); // NOI18N
        jMenuItem7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/HilfeZerMen.png"))); // NOI18N
        jMenuItem7.setText("Was ist das MINT-EC-Zertifikat?");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);
        jMenu2.add(jSeparator2);

        jMenuItem8.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 12)); // NOI18N
        jMenuItem8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/HilfeA1Men.png"))); // NOI18N
        jMenuItem8.setText("Hilfe zu Anforderungsfeld I");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuItem9.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 12)); // NOI18N
        jMenuItem9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/HilfeA2Men.png"))); // NOI18N
        jMenuItem9.setText("Hilfe zu Anforderungsfeld II");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);

        jMenuItem10.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 12)); // NOI18N
        jMenuItem10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/HilfeA3Men.png"))); // NOI18N
        jMenuItem10.setText("Hilfe zu Anforderungsfeld III");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem10);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Hilfe");
        jMenu3.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 12)); // NOI18N
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jMenu3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jMenu3MouseExited(evt);
            }
        });

        jMenuItem16.setText("Über MINTken");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem16);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * *
     * Aktualisiert den Text was die jeweiligen Niveaus erfuellt unter den A1&A2
     * Reglern
     */
    private void updateNiveautext(JComboBox box, JLabel label, JSlider slider, int anforderungsfeld) {
        String bedText = "";
        if (!box.getSelectedItem().toString().contains("Bitte wähle")) {
            if (anforderungsfeld == 1) {
                bedText = zer.getAnforderungsfeldEins().erfuellbareAktivitaeten.get(box.getSelectedIndex() - 1).getAnforderung(slider.getValue() - 1);
            } else {
                bedText = zer.getAnforderungsfeldZwei().erfuellbareAktivitaeten.get(box.getSelectedIndex() - 1).getAnforderung(slider.getValue() - 1);
            }
            label.setText(bedText);
        } else {
            label.setText("");
        }
    }

    private void jSliderStateChanged(javax.swing.event.ChangeEvent evt, JSlider slider) {
        String text = "Niveau: " + String.valueOf(slider.getValue());
        int index = 0;
        if (alleA3S1Slider.contains(slider)) {
            index = alleA3S1Slider.indexOf(slider);
            alleA3S1Label.get(index).setText(text);
        } else {
            index = alleA3S2Slider.indexOf(slider);
            alleA3S2Label.get(index).setText(text);
        }
    }

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        String text = "Niveau: " + String.valueOf(jSlider1.getValue());
        jLabel4.setText(text);

        updateNiveautext(jComboBox1, jLabel10, jSlider1, 1);
    }//GEN-LAST:event_jSlider1StateChanged

    private void jSlider2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider2StateChanged
        String text = "Niveau: " + String.valueOf(jSlider2.getValue());
        jLabel5.setText(text);

        updateNiveautext(jComboBox2, jLabel12, jSlider2, 2);
    }//GEN-LAST:event_jSlider2StateChanged

    private void datenauswertenAktion() {
        if (werteDatenAus() == false) {
            //Der Beratungstext
            String[] beratungstext = zer.berate().split(" _// "); //Teilung des Textes zwischen den einzelnen Anforderungsfeldern

            //Ergebnis ausgeben
            JOptionPane.showMessageDialog(jFrame1, beratungstext);
        }
    }

    private void alsDateiSpeichernAktion() {
        if (werteDatenAus() == false) {
            //Erzeuge ein Dialogfenster, damit der Nutzer selbststaendig den Dateipfad
            //und -namen seiner Auswertung bestimmen kann
            JFileChooser jFileChooser1 = new JFileChooser();
            jFileChooser1.setDialogTitle("MINTken-Auswertung speichern");
            FileNameExtensionFilter filter = new FileNameExtensionFilter(".txt", "txt", "text");
            jFileChooser1.setFileFilter(filter);
            jFileChooser1.showSaveDialog(this);
            String dateiname = jFileChooser1.getToolTipText();
            jFileChooser1.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

            try {
                //Versuche die Datei unter gegebenen Namen zu speichern
                zer.erfuellteAktivitaetenTextdatei(jFileChooser1.getSelectedFile().getAbsolutePath());
                JOptionPane.showMessageDialog(jFrame1, "Datei wurde im ausgewählten Pfad gespeichert.");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(jFrame1, "Speichern der Datei fehlgeschlagen oder fehlerhaft.");
            }
        }
    }

    private void dateiLadenAktion() {
        //Erzeuge den FileChooser
        JFileChooser jFileChooser1 = new JFileChooser();
        jFileChooser1.setDialogTitle("MINTken-Auswertung Laden");
        FileNameExtensionFilter filter = new FileNameExtensionFilter(".txt", "txt", "text");
        jFileChooser1.setFileFilter(filter);
        jFileChooser1.showOpenDialog(this);
        String dateiname = jFileChooser1.getSelectedFile().getAbsolutePath();
        if (!dateiname.endsWith(".txt")) {
            JOptionPane.showMessageDialog(jFrame1, "Es können nur Textdateien (.txt) ausgelesen werden.");
        }
        jFileChooser1.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

        try {
            //Erhalte die Codes aus der Datei und fuege die Aktivitaeten dem Zertifikat hinzu
            ArrayList<String> codes = zer.erhalteCodesAusDatei(dateiname);
            if (codes.isEmpty()) {
                JOptionPane.showMessageDialog(jFrame1, "Es wurde eine ungültige MINTken-Auswertungsdatei ausgewählt. \n"
                        + "\n"
                        + "Für eine gültige Datei müssen vor der Aktivitätenaufzählung am Schluss jeweils 5-stellige Codes stehen.");
            }
            leereAlleA3Boxen();
            zer = new Zertifikat();
            zer.erzeugeZertfikatsdaten(codes);

            //A1-Box & Regler einstellen
            if (!zer.getAnforderungsfeldEins().erfuellteAktivitaeten.isEmpty()) {
                jComboBox1.setSelectedItem(zer.getAnforderungsfeldEins().erfuellteAktivitaeten.get(0).getName());
                jSlider1.setValue(zer.getAnforderungsfeldEins().erfuellteAktivitaeten.get(0).getNiveau());
            }

            //A2-Box & Regler einstellen
            if (!zer.getAnforderungsfeldZwei().erfuellteAktivitaeten.isEmpty()) {
                jComboBox2.setSelectedItem(zer.getAnforderungsfeldZwei().erfuellteAktivitaeten.get(0).getName());
                jSlider2.setValue(zer.getAnforderungsfeldZwei().erfuellteAktivitaeten.get(0).getNiveau());
            }

            //A3S1-Boxen & Regler einstellen
            for (int i = 0; i < zer.getAnforderungsfeldDrei().getErfuellteAktivitaetenS1().size(); i++) {
                if (i >= alleA3S1Boxen.size()) {
                    fuegeA3S1SetHinzu();
                }
                alleA3S1Boxen.get(i).setSelectedItem(zer.getAnforderungsfeldDrei().getErfuellteAktivitaetenS1().get(i).getName());
                alleA3S1Slider.get(i).setValue(zer.getAnforderungsfeldDrei().getErfuellteAktivitaetenS1().get(i).getNiveau());
            }

            //A3S2-Boxen & Regler einstellen
            for (int i = 0; i < zer.getAnforderungsfeldDrei().getErfuellteAktivitaetenS2().size(); i++) {
                if (i >= alleA3S2Boxen.size()) {
                    fuegeA3S2SetHinzu();
                }
                alleA3S2Boxen.get(i).setSelectedItem(zer.getAnforderungsfeldDrei().getErfuellteAktivitaetenS2().get(i).getName());
                alleA3S2Slider.get(i).setValue(zer.getAnforderungsfeldDrei().getErfuellteAktivitaetenS2().get(i).getNiveau());
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(jFrame1, "Laden der Datei fehlgeschlagen oder fehlerhaft.");
        }
    }

    /**
     * return true wenn die Daten des Nutzers fehlerhaft waren, false wenn ein
     * erfolgreiches Zertifikat berechnet wurde
     */
    private boolean werteDatenAus() {
        //Erstelle neues Zertifikat, damit sich jComboBox'en bei einer Aenderung der Wahl nicht draufaddieren
        zer = new Zertifikat();

        ArrayList<String> aktivNamen = new ArrayList<>();
        boolean fertig = false;
        ArrayList<JComboBox> alleA3Boxen = new ArrayList<>();
        alleA3Boxen.addAll((Collection<? extends JComboBox>) alleA3S1Boxen.clone());
        alleA3Boxen.addAll((Collection<? extends JComboBox>) alleA3S2Boxen.clone());

        ArrayList<JSlider> alleA3Slider = new ArrayList<>();
        alleA3Slider.addAll((Collection<? extends JSlider>) alleA3S1Slider.clone());
        alleA3Slider.addAll((Collection<? extends JSlider>) alleA3S2Slider.clone());

        //Pruefe zunaechst alle Felder....
        for (int i = 0; i < alleA3Boxen.size(); i++) {
            String akA1 = jComboBox1.getSelectedItem().toString();
            String akA2 = jComboBox2.getSelectedItem().toString();
            String akA3 = alleA3Boxen.get(i).getSelectedItem().toString();

            if (akA2.equals("Fachwissenschaftliche Arbeit mit mind. 10 Seiten") && akA3.equals("Fachwissenschaftliche Arbeit mit mindestens 10 Seiten oder besondere Lernleistung (Falls noch nicht in Anforderungsfeld I oder II eingebracht)")) {
                JOptionPane.showMessageDialog(jFrame1, "Wissenschaftliche Arbeit bereits in A2 eingetragen.");
                fertig = true;
                break;
            } else if (akA2.equals("Besondere Lernleistung") && akA3.equals("Fachwissenschaftliche Arbeit mit mindestens 10 Seiten oder besondere Lernleistung (Falls noch nicht in Anforderungsfeld I oder II eingebracht)")) {
                JOptionPane.showMessageDialog(jFrame1, "Besondere Lernleistung bereits in A2 eingetragen.");
                fertig = true;
                break;
            } else if (akA2.equals("Wissenschaftspropädeutisches Fach") && akA3.equals("wissenshaftspropädeutisches Fach oder zusätzlicher MINT-Kurs durchgängig in der Qualifikationsphase belegt (Falls noch nicht in Anforderungsfeld I oder II eingebracht)")) {
                JOptionPane.showMessageDialog(jFrame1, "Wissenschaftspropädeutisches Fach bereits in A2 eingetragen.");
                fertig = true;
                break;
            } else if (aktivNamen.contains(akA3) && !akA3.equals("Bitte wähle eine Aktivität des Anforderungsfeldes III")) {
                int currentSliderValue = alleA3Slider.get(i).getValue();
                if (i >= alleA3S1Boxen.size()) { //S2-jComboBox
                    Aktivitaet ausgewaehltS2 = S2.get(alleA3Boxen.get(i).getSelectedIndex() - 1); //Index -1 weil das erste Objekt in der Auswahlliste immer "Bitte waehle..." ist
                    if (ausgewaehltS2.isMehrfachWertbar() == false) {
                        JOptionPane.showMessageDialog(jFrame1, new String[]{akA3 + " kann einmalig entweder in der S I oder der S II einberechnet werden.", "Um Fehler in der Berechnung zu vermeiden, bitte entscheide dich für eine Bewertung der Aktivität.", "Es empfiehlt sich, die höher bewertete einzubeziehen."});
                        fertig = true;
                        break;
                    }
                } else { //S1-jCombobox
                    Aktivitaet ausgewaehltS1 = S1.get(alleA3Boxen.get(i).getSelectedIndex() - 1); //Index -1 weil das erste Objekt in der Auswahlliste immer "Bitte waehle..." ist
                    if (ausgewaehltS1.isMehrfachWertbar() == false) {
                        JOptionPane.showMessageDialog(jFrame1, new String[]{akA3 + " kann einmalig entweder in der S I oder der S II einberechnet werden.", "Um Fehler in der Berechnung zu vermeiden, bitte entscheide dich für eine Bewertung der Aktivität.", "Es empfiehlt sich, die höher bewertete einzubeziehen."});
                        fertig = true;
                        break;
                    }
                }
            }
            //Kein Ausnahmefall, die Schleife musste nicht angehalten werden
            if (!akA3.equals("Bitte wähle eine Aktivität des Anforderungsfeldes III")) { //Der Benutzer hat eine Aktivitaet ausgewaehlt
                int currentSliderValue = alleA3Slider.get(i).getValue();
                if (i >= alleA3S1Boxen.size()) { //S2-jComboBox
                    Aktivitaet ausgewaehltS2 = S2.get(alleA3Boxen.get(i).getSelectedIndex() - 1); //Index -1 weil das erste Objekt in der Auswahlliste immer "Bitte waehle..." ist
                    if (ausgewaehltS2.getAnforderung(currentSliderValue - 1).equals("")) { //siehe naechste Zeile
                        JOptionPane.showMessageDialog(jFrame1, "Das ausgewählte Niveau der Aktivität " + akA3 + " ist nicht verfügbar.");
                        fertig = true;
                        break;
                    }
                    zer.getAnforderungsfeldDrei().aktivitaetErfuelltS2(ausgewaehltS2, currentSliderValue);
                } else { //S1-jCombobox
                    Aktivitaet ausgewaehltS1 = S1.get(alleA3Boxen.get(i).getSelectedIndex() - 1); //Index -1 weil das erste Objekt in der Auswahlliste immer "Bitte waehle..." ist
                    if (ausgewaehltS1.getAnforderung(currentSliderValue - 1).equals("")) { //siehe naechste Zeile
                        JOptionPane.showMessageDialog(jFrame1, "Das ausgewählte Niveau der Aktivität " + akA3 + " ist nicht verfügbar.");
                        fertig = true;
                        break;
                    }

                    zer.getAnforderungsfeldDrei().aktivitaetErfuelltS1(ausgewaehltS1, currentSliderValue);
                }
            }
            aktivNamen.add(akA3);

        }

        if (fertig == true) {
            //Die Schleife musste wegen einer Fehlermeldung abgebrochen werden, mache nichts mehr
        } else {
            //Jetzt noch die Anforderungsfelder I & II
            if (!jComboBox1.getSelectedItem().toString().equals("Bitte wähle eine Aktivität des Anforderungsfeldes I")) { //Der Benutzer hat eine Aktivitaet ausgewaehlt
                zer.getAnforderungsfeldEins().aktivitaetErfuellt(zer.getAnforderungsfeldEins().getErfuellbareAktivitaeten().get(jComboBox1.getSelectedIndex() - 1), jSlider1.getValue());
            }

            if (!jComboBox2.getSelectedItem().toString().equals("Bitte wähle eine Aktivität des Anforderungsfeldes II")) { //Der Benutzer hat eine Aktivitaet ausgewaehlt
                zer.getAnforderungsfeldZwei().aktivitaetErfuellt(zer.getAnforderungsfeldZwei().getErfuellbareAktivitaeten().get(jComboBox2.getSelectedIndex() - 1), jSlider2.getValue());
            }
            zer.aktualisiereAlle();
        }
        return fertig;
    }


    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        datenauswertenAktion();
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        alsDateiSpeichernAktion();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void comboBoxStateChange(java.awt.event.ItemEvent evt, JComboBox box) {
        reiheHervorheben(box);
    }

    private void comboBoxFocusGained(java.awt.event.FocusEvent evt, JComboBox box) {
        reiheHervorheben(box);
    }

    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased
        if (SwingUtilities.isRightMouseButton(evt)) {
            //Wechsel den Fokus
            jTable1.requestFocusInWindow();
            //Markiere die angeklickte Aktivitaet
            Point p = evt.getPoint(); //Kriege die Koordinaten vom Mausklick
            int reihenIndex = jTable1.rowAtPoint(p); //Die Reihe, die die Koordinate enthaelt
            jTable1.setRowSelectionInterval(reihenIndex, reihenIndex);

            //Setze das Menue auf Startzustand
            jPopupMenu1.removeAll();

            //Fuege die Auswahlmoeglichkeiten hinzu
            jPopupMenu1.add(jMenuItem1);
            jPopupMenu1.add(jMenuItem2);
            jPopupMenu1.add(jSeparator1);
            jPopupMenu1.add(jMenuItem3);

            //Zeige das Menue an
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jTable1MouseReleased

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //Welche Aktivitaet wurde markiert?
        int reihenIndex = jTable1.getSelectedRow();
        String aktivitaet = jTable1.getValueAt(reihenIndex, 1).toString();

        if (keineS1Aktivitaeten.contains(aktivitaet)) { //ungueltige Aktivitaet; siehe naechste Zeile
            JOptionPane.showMessageDialog(jFrame1, "Diese Aktivität lässt sich nicht in der SI absolvieren.");
        } else { //gueltige Aktivitaet
            //Gehe die Comboboxen der SI durch, um zu schauen, ob fuer jede bereits jeweils eine Aktivitaet ausgewaehlt wurde.
            //Fuege wenn moeglich die Aktivitaet zu der erstgefundensten unausgewaehlten Box hinzu.
            //Sonst fuege eine Auswahlbox mit der Aktivitaet hinzu.
            for (int i = 0; i <= alleA3S1Boxen.size(); i++) {
                if (alleA3S1Boxen.get(i).getSelectedItem().equals("Bitte wähle eine Aktivität des Anforderungsfeldes III")) { //Eine Box ohne ausgewaehlte Aktivitaet
                    alleA3S1Boxen.get(i).setSelectedItem(aktivitaet);
                    alleA3S1Slider.get(i).requestFocusInWindow();
                    break;
                }
                if (i == alleA3S1Boxen.size() - 1) {
                    fuegeA3S1SetHinzu();
                    alleA3S1Boxen.get(i + 1).setSelectedItem(aktivitaet);
                    alleA3S1Slider.get(i + 1).requestFocusInWindow();
                    jScrollPane2.getVerticalScrollBar().setValue(jScrollPane2.getVerticalScrollBar().getMaximum());
                    break;
                }
            }
        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        //Welche Aktivitaet wurde markiert?
        int reihenIndex = jTable1.getSelectedRow();
        String aktivitaet = jTable1.getValueAt(reihenIndex, 1).toString();

        if (keineS2Aktivitaeten.contains(aktivitaet)) {
            JOptionPane.showMessageDialog(jFrame1, "Diese Aktivität lässt sich nicht in der SII absolvieren.");
        } else {
            //Gehe die Comboboxen der SII durch, um zu schauen, ob fuer jede bereits jeweils eine Aktivitaet ausgewaehlt wurde.
            //Fuege wenn moeglich die Aktivitaet zu der erstgefundensten unausgewaehlten Box hinzu.
            //Sonst gebe eine Meldung aus, dass alle Boxen bereits eine Aktivitaet ausgewaehlt haben.
            for (int i = 0; i < alleA3S2Boxen.size(); i++) {
                if (alleA3S2Boxen.get(i).getSelectedItem().equals("Bitte wähle eine Aktivität des Anforderungsfeldes III")) { //Eine Box ohne ausgewaehlte Aktivitaet
                    alleA3S2Boxen.get(i).setSelectedItem(aktivitaet);
                    alleA3S2Slider.get(i).requestFocusInWindow();
                    break;
                }
                if (i == alleA3S2Boxen.size() - 1) {
                    fuegeA3S2SetHinzu();
                    alleA3S2Boxen.get(i + 1).setSelectedItem(aktivitaet);
                    alleA3S2Slider.get(i + 1).requestFocusInWindow();
                    jScrollPane3.getVerticalScrollBar().setValue(jScrollPane3.getVerticalScrollBar().getMaximum());
                    break;
                }
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        leereAlleA3Boxen();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        //Code siehe http://stackoverflow.com/a/22067320
        jTextField1.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = jTextField1.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String text = jTextField1.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("");
            }
        });
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jTextField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusGained
        //Das Textfield wurde erstmalig ausgewaehlt
        if (jTextField1.getText().equals("Tabelle nach Wörtern filtern...")) {
            jTextField1.setText("");
        }
    }//GEN-LAST:event_jTextField1FocusGained

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        dateiLadenAktion();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        fuegeA3S1SetHinzu();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        fuegeA3S2SetHinzu();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        datenauswertenAktion();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        alsDateiSpeichernAktion();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        dateiLadenAktion();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        String hilfetext[] = {zer.getAnforderungsfeldEins().getFokus(),
            " ",
            "Anforderung für Stufe 1: Mittelwert aller anzurechnender Kurse >= 9 Notenpunkte.",
            "Anforderung für Stufe 2: Mittelwert aller anzurechnender Kurse >= 11 Notenpunkte.",
            "Anforderung für Stufe 3: Mittelwert aller anzurechnender Kurse >= 13 Notenpunkte.",
            " ",
            "Dabei müssen die Kurse durchgehend in der Qualifikationsphase belegt worden sein und die Punkte eines anzurechnenden Kurses dürfen nicht unter 5 liegen.",
            "Das Ergebnis darf nicht gerundert werden (Beispiel: 12,75 Punkte -> Stufe 2 )"};
        JOptionPane.showMessageDialog(jFrame1, hilfetext);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        String hilfetext[] = {zer.getAnforderungsfeldZwei().getFokus(),
            " ",
            "Anforderung für Stufe 1: >= 9 Notenpunkte.",
            "Anforderung für Stufe 2: >= 11 Notenpunkte.",
            "Anforderung für Stufe 3: >= 13 Notenpunkte.",
            " ",
            "Wenn Einbeziehung einer der möglichen Wettbewerbe: ",
            "Anforderung für Stufe 1: Ernsthafte Teilnahme am Regionalwettbewerb.",
            "Anforderung für Stufe 2: Preisträger im Regionalwettbewerb (keine Sonderpreise).",
            "Anforderung für Stufe 3: Teilnahme am Landes- oder Bundeswettbewerb."};
        JOptionPane.showMessageDialog(jFrame1, hilfetext);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        String hilfetext[] = {zer.getAnforderungsfeldDrei().getFokus(),
            " ",
            "Anforderung für Stufe 1: Ab 40 Punkte, davon maximal 20 aus der SI.",
            "Anforderung für Stufe 2: Ab 60 Punkte, davon maximal 30 aus der SI UND mindestens einmal Niveau 2 in der SII.",
            "Anforderung für Stufe 3: Ab 80 Punkte, davon maximal 40 aus der SI UND mindestens zweimal Niveau 2 in der SII",
            String.format("%36s ", "") + "ODER 80 Punkte, davon maximal 40 aus der SI UND einmal Niveau 3 in der SII.",
            " ",
            "Eine Aktivität kann entweder durch einer der Boxen oder direkt aus der Tabelle mit einem Rechtsklick hinzugefügt werden."};
        JOptionPane.showMessageDialog(jFrame1, hilfetext);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        String text = String.format("Das MINT-EC-Zertifikat wird auf Antrag des Schülers zusammen mit dem Abiturzeugnis an Schülerinnen und Schüler vergeben, die im Laufe ihrer\n"
                + "Schulzeit kontinuierlich über den Unterricht hinaus besondere Leistungen in den MINT-Fächern (Mathematik, Informatik, Naturwissenschaften, Technik) erbracht haben.\n"
                + "Die Kontrolle der Aktivitäten erfolgt durch Kopien von Urkunden, Zeugnissen etc., die beim MINT-Koordinator abgegeben werden müssen. \n \n"
                + "Schülerinnen und Schüler, die das MINT-EC-Zertifikat erhalten, müssen Mindestanforderungen in den drei Anforderungsfeldern\n"
                + String.format("%36s ", "") + "I 	 Fachliche Kompetenz\n"
                + String.format("%36s ", "") + "II 	 Fachwissenschaftliches Arbeiten\n"
                + String.format("%36s ", "") + "III  Zusätzliche MINT-Aktivitäten erfüllen.\n \n"
                + "In jedem der drei Anforderungsfelder werden die Schülerleistungen einer der drei Stufen\n"
                + String.format("%36s ", "") + "1 	 „mit Erfolg“\n"
                + String.format("%36s ", "") + "2 	 „mit besonderem Erfolg“\n"
                + String.format("%36s ", "") + "3 	 „mit Auszeichnung“ zugeordnet\n \n"
                + "Ein Zertifikat wird nur verliehen, wenn in jedem der drei Felder mindestens die Stufe 1 erreicht wurde.\n"
                + "Die Gesamteinstufung des Zertifikates ergibt sich aus dem mathematisch gerundeten Mittelwert der in den drei Anforderungsfeldern erreichten Stufen.\n"
                + "Das MINT-EC-Zertifikat wird in Form einer vierseitigen Urkunde verliehen.\n");

        JOptionPane.showMessageDialog(jFrame1, text);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        fuegeA3S1SetHinzu();
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        fuegeA3S2SetHinzu();
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenu1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseEntered
        JMenu item = (JMenu) evt.getSource();
        item.setSelected(true);
    }//GEN-LAST:event_jMenu1MouseEntered

    private void jMenu1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseExited
        JMenu item = (JMenu) evt.getSource();
        if (!item.isPopupMenuVisible()) {
            item.setSelected(false);
        }
    }//GEN-LAST:event_jMenu1MouseExited

    private void jMenu2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseEntered
        JMenu item = (JMenu) evt.getSource();
        item.setSelected(true);
    }//GEN-LAST:event_jMenu2MouseEntered

    private void jMenu2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseExited
        JMenu item = (JMenu) evt.getSource();
        if (!item.isPopupMenuVisible()) {
            item.setSelected(false);
        }
    }//GEN-LAST:event_jMenu2MouseExited

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        updateNiveautext(jComboBox1, jLabel10, jSlider1, 1);
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        updateNiveautext(jComboBox2, jLabel12, jSlider2, 2);
    }//GEN-LAST:event_jComboBox2ItemStateChanged

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        entferneA3Set(alleA3S1Boxen);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        entferneA3Set(alleA3S2Boxen);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        entferneA3Set(alleA3S1Boxen);
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        entferneA3Set(alleA3S2Boxen);
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        new About().setVisible(true);
    }//GEN-LAST:event_jMenuItem16ActionPerformed

    private void jMenu3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseEntered
        JMenu item = (JMenu) evt.getSource();
        item.setSelected(true);
    }//GEN-LAST:event_jMenu3MouseEntered

    private void jMenu3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseExited
        JMenu item = (JMenu) evt.getSource();
        if (!item.isPopupMenuVisible()) {
            item.setSelected(false);
        }
    }//GEN-LAST:event_jMenu3MouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    /**
     * Setze alle A3-Boxen und ihre Regler auf Anfangszustand
     */
    public void leereAlleA3Boxen() {
        for (int i = 0; i < alleA3S1Boxen.size(); i++) {
            alleA3S1Boxen.get(i).setSelectedItem("Bitte wähle eine Aktivität des Anforderungsfeldes III");
            alleA3S1Slider.get(i).setValue(1);
        }
        for (int i = 0; i < alleA3S2Boxen.size(); i++) {
            alleA3S2Boxen.get(i).setSelectedItem("Bitte wähle eine Aktivität des Anforderungsfeldes III");
            alleA3S2Slider.get(i).setValue(1);
        }
    }

    /**
     * Hebt die Reihe einer ausgewaehlten Aktivitaet hervor, indem sie markiert
     * wird und ggf. an erster Stelle steht
     */
    private void reiheHervorheben(JComboBox box) {
        String ausgewaehlteAkt = box.getSelectedItem().toString();
        int ausgewaehlteBox = 0;
        if (alleA3S1Boxen.contains(box)) {
            ausgewaehlteBox = alleA3S1Boxen.indexOf(box);
        } else {
            ausgewaehlteBox = alleA3S2Boxen.indexOf(box) + alleA3S2Boxen.size();
        }

        if (ausgewaehlteAkt.equals("Bitte wähle eine Aktivität des Anforderungsfeldes III")) { //Der Nutzer hat die Komponente zurueck auf den Anfangszustand gesetzt, also keine Aktivitaet
            //Loesche alte Auswahl
            int alteReiheIndex = reihenindexPuffer[ausgewaehlteBox + 1];
            jTable1.removeRowSelectionInterval(alteReiheIndex, alteReiheIndex);
        }

        for (int i = 0; i < jTable1.getRowCount(); i++) {
            String ausgewaehlteReihe = jTable1.getValueAt(i, 1).toString();
            if (ausgewaehlteAkt.equals(ausgewaehlteReihe)) {
                jTable1.setRowSelectionInterval(i, i); //markiere ausgewaehlte Akitivitaet in der Liste
                jTable1.scrollRectToVisible(new Rectangle(jTable1.getCellRect(i, 0, true))); //autoscrolle zu der Aktivitaet, so dass diese immer nach dem Auswaehlen sichtbar ist
                reihenindexPuffer[ausgewaehlteBox + 1] = i;
            }
        }
    }

    /**
     * Fuellt die Tabelle mit den Aktivitaeten.
     */
    private void initalisiereJTable() {
        ArrayList<Aktivitaet> taeten = zer.getAnforderungsfeldDrei().getErfuellbareAktivitaeten();
        int aktisize = taeten.size();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        for (int reihe = 0; reihe < aktisize; reihe++) {
            if (zer.getAnforderungsfeldDrei().getErfuellbareAktivitaeten().get(reihe).isIstWettbewerb() == true) { //Die Aktivitaet ist ein Wettbewerb
                Object[] aktiDaten = {"Wettbewerb", taeten.get(reihe).getName(), taeten.get(reihe).getAnforderung(0), taeten.get(reihe).getAnforderung(1), taeten.get(reihe).getAnforderung(2)}; //Alle Aktivitaetsdaten fuer eine Reihe
                model.addRow(aktiDaten);
            } else { //Die Aktivitaet ist kein Wettbewerb
                Object[] aktiDaten = {"Lehr- und Lernveranstaltungen", taeten.get(reihe).getName(), taeten.get(reihe).getAnforderung(0), taeten.get(reihe).getAnforderung(1), taeten.get(reihe).getAnforderung(2)}; //Alle Aktivitaetsdaten fuer eine Reihe
                model.addRow(aktiDaten);
            }
        }
    }

    /**
     * Fasst die Initialisation der hinzugefuegten Komponenten zusammen.
     */
    private void initialisiereMeineElemente() {
        zer = new Zertifikat();
        initialisiereSpeziallisten();
        initalisiereJTable();
        initialisiereAlleCombo();
        for (int i = 0; i < startanzahlA3Boxen; i++) {
            fuegeA3S1SetHinzu();
            fuegeA3S2SetHinzu();
        }
        setzeIcon();
        aendereThumbs();
        jTable1.getTableHeader().setDefaultRenderer(new HeaderColor());
        this.rowSorter = new TableRowSorter<>(jTable1.getModel());
        jTable1.setRowSorter(rowSorter);
        jScrollPane2.getVerticalScrollBar().setUnitIncrement(10);
        jScrollPane3.getVerticalScrollBar().setUnitIncrement(10);
    }

    /**
     * Fasst die Neuinitialisierung der JSlider thumbs zusammen
     */
    private void aendereThumbs() {
        jSlider1.setUI(new CustomSliderUI(jSlider1, 69, 127, 157)); //blau
        jSlider2.setUI(new CustomSliderUI(jSlider2, 93, 157, 69)); //gruen
    }

    /**
     * Fasst die Initialisierung aller ComboBox'en zusammen
     */
    private void initialisiereAlleCombo() {
        initialisiereA1Combo();
        initialisiereA2Combo();
    }

    /**
     * Fuellt die Listen keineS1Aktivitaeten und keineS2Aktivitaeten welche
     * jeweils die Aktivitaeten beherbergen, welche nicht in der jeweiligen
     * Stufe erfuellbar sind.
     */
    private void initialisiereSpeziallisten() {
        for (Aktivitaet erfuellbareAktivitaeten : zer.getAnforderungsfeldDrei().erfuellbareAktivitaeten) {
            switch (erfuellbareAktivitaeten.getErfuellbarFuer()) {
                case 1: //Die momentane Aktivitaet ist nur in der SI erfuellbar
                    keineS2Aktivitaeten.add(erfuellbareAktivitaeten.getName());
                    break;
                case 2: //Die momentane Aktivitaet ist nur in der SII erfuellbar
                    keineS1Aktivitaeten.add(erfuellbareAktivitaeten.getName());
                    break;
                default: //Die momentane Aktivitaet kann in beiden Stufen erfuellt werden
                    break;
            }
        }
    }

    /**
     * Fuellt die ComboBox mit den Aktivitaeten des Anforderungsfeldes 1
     */
    private void initialisiereA1Combo() {
        jComboBox1.addItem("Bitte wähle eine Aktivität des Anforderungsfeldes I");
        for (Aktivitaet erfuellbareAktivitaeten : zer.getAnforderungsfeldEins().erfuellbareAktivitaeten) {
            jComboBox1.addItem(erfuellbareAktivitaeten.getName());
        }
        adjustScrollBar(jComboBox1);
    }

    /**
     * Fuellt die ComboBox mit den Aktivitaeten des Anforderungsfeldes 2
     */
    private void initialisiereA2Combo() {
        jComboBox2.addItem("Bitte wähle eine Aktivität des Anforderungsfeldes II");
        for (Aktivitaet erfuellbareAktivitaeten : zer.getAnforderungsfeldZwei().erfuellbareAktivitaeten) {
            jComboBox2.addItem(erfuellbareAktivitaeten.getName());
        }
        adjustScrollBar(jComboBox2);
    }

    /**
     * Fuellt die ComboBox der S1 mit den Aktivitaeten des Anforderungsfeldes 3
     */
    private void initialisiereA3S1Combo(JComboBox box) {
        box.addItem("Bitte wähle eine Aktivität des Anforderungsfeldes III");
        for (Aktivitaet erfuellbareAktivitaeten : zer.getAnforderungsfeldDrei().erfuellbareAktivitaeten) {
            if ((keineS1Aktivitaeten.contains(erfuellbareAktivitaeten.getName()))) {
                //Die Aktivitaeten duerfen nicht in die JComboBox fuer die S1
            } else {
                box.addItem(erfuellbareAktivitaeten.getName());
                S1.add(erfuellbareAktivitaeten);
            }
        }
        adjustScrollBar(box);
    }

    /**
     * Fuellt die ComboBox der S2 mit den Aktivitaeten des Anforderungsfeldes 3
     */
    private void initialisiereA3S2Combo(JComboBox box) {
        box.addItem("Bitte wähle eine Aktivität des Anforderungsfeldes III");
        for (Aktivitaet erfuellbareAktivitaeten : zer.getAnforderungsfeldDrei().erfuellbareAktivitaeten) {
            if ((keineS2Aktivitaeten.contains(erfuellbareAktivitaeten.getName()))) {
                //Die Aktivitaeten duerfen nicht in die JComboBox fuer die S2
            } else {
                box.addItem(erfuellbareAktivitaeten.getName());
                S2.add(erfuellbareAktivitaeten);
            }
        }
        adjustScrollBar(box);
    }

    /**
     * Fuegt fuer S1 eine Box samt dazugehoerigen Regler&Reglertext hinzu
     */
    private void fuegeA3S1SetHinzu() {
        //Initialisiere die Box
        int yKoordBox = alleA3S1Boxen.size() * abstandZwischenA3Elementen;
        alleA3S1Boxen.add(new javax.swing.JComboBox<>());
        final JComboBox box = alleA3S1Boxen.get(alleA3S1Boxen.size() - 1);
        box.setBackground(new java.awt.Color(157, 69, 73));
        box.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        box.setPreferredSize(new java.awt.Dimension(28, 35));
        box.addItemListener(new java.awt.event.ItemListener() {
            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxStateChange(evt, box);
            }
        });
        box.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusGained(java.awt.event.FocusEvent evt) {
                comboBoxFocusGained(evt, box);
            }
        });
        //Fuelle den Inhalt der Box
        initialisiereA3S1Combo(box);

        //Initialisiere Regler
        alleA3S1Slider.add(new javax.swing.JSlider());
        final JSlider regler = alleA3S1Slider.get(alleA3S1Slider.size() - 1);
        regler.setMaximum(3);
        regler.setMinimum(1);
        regler.setValue(1);
        regler.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        regler.addChangeListener(new javax.swing.event.ChangeListener() {
            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderStateChanged(evt, regler);
            }
        });
        regler.setUI(new CustomSliderUI(regler, 157, 69, 73));

        //Initialisiere dazugehoerigen Text
        int yKoordLabel = alleA3S1Label.size() * abstandZwischenA3Elementen + 20;
        alleA3S1Label.add(new javax.swing.JLabel());
        JLabel label = alleA3S1Label.get(alleA3S1Label.size() - 1);
        label.setForeground(new java.awt.Color(157, 69, 73));
        label.setText("Niveau: 1");

        //Fuege alles dem Panel hinzu und passe die Ansicht an
        jPanel1.add(box, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, yKoordBox, 240, -1));
        jPanel1.add(regler, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, yKoordBox, 115, 20));
        jPanel1.add(label, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, yKoordLabel, -1, -1));
        jScrollPane2.setViewportView(jPanel1);
    }

    /**
     * Fuegt fuer S1 eine Box samt dazugehoerigen Regler&Reglertext hinzu
     */
    private void fuegeA3S2SetHinzu() {
        //Initialisiere die Box
        int yKoordBox = alleA3S2Boxen.size() * abstandZwischenA3Elementen;
        alleA3S2Boxen.add(new javax.swing.JComboBox<>());
        final JComboBox box = alleA3S2Boxen.get(alleA3S2Boxen.size() - 1);
        box.setBackground(new java.awt.Color(157, 107, 69));
        box.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        box.setPreferredSize(new java.awt.Dimension(28, 35));
        box.addItemListener(new java.awt.event.ItemListener() {
            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxStateChange(evt, box);
            }
        });
        box.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusGained(java.awt.event.FocusEvent evt) {
                comboBoxFocusGained(evt, box);
            }
        });
        //Fuelle den Inhalt der Box
        initialisiereA3S2Combo(box);

        //Initialisiere Regler
        alleA3S2Slider.add(new javax.swing.JSlider());
        final JSlider regler = alleA3S2Slider.get(alleA3S2Slider.size() - 1);
        regler.setMaximum(3);
        regler.setMinimum(1);
        regler.setValue(1);
        regler.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        regler.addChangeListener(new javax.swing.event.ChangeListener() {
            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderStateChanged(evt, regler);
            }
        });
        regler.setUI(new CustomSliderUI(regler, 157, 107, 69));

        //Initialisiere dazugehoerigen Text
        int yKoordLabel = alleA3S2Label.size() * abstandZwischenA3Elementen + 20;
        alleA3S2Label.add(new javax.swing.JLabel());
        JLabel label = alleA3S2Label.get(alleA3S2Label.size() - 1);
        label.setForeground(new java.awt.Color(157, 107, 69));
        label.setText("Niveau: 1");

        //Fuege alles dem Panel hinzu und passe die Ansicht an
        jPanel2.add(box, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, yKoordBox, 240, -1));
        jPanel2.add(regler, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, yKoordBox, 115, 20));
        jPanel2.add(label, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, yKoordLabel, -1, -1));
        jScrollPane3.setViewportView(jPanel2);
    }

    /**
     * Entfernt ein Set (Box, Regler, Label) von der GUI fuer A3 fuer SI oder
     * SII. Es wird stets das letzte leere Set entfernt. Wenn das letzte Set
     * Daten hat, das vorletzte aber leer ist, werden die Daten vom letzten Set
     * auf das vorletzte uebertragen und das letzte wird entfernt. Wenn es kein
     * Set gibt, was entfernt werden koennte, mache nichts.
     */
    private void entferneA3Set(ArrayList<JComboBox> boxen) {
        if (boxen.isEmpty()) {
            //Mache nichts, es kann nichts entfernt werden
        } else {
            int i = boxen.size() - 1;
            if (boxen.get(i).getSelectedIndex() == 0) { //Es wurde keine Aktivitaet fuer das letzte Set ausgewaehlt
                if (boxen == alleA3S1Boxen) { //Es wird ein Set fuer SI entfernt
                    //Entferne die Elemente in der GUI
                    jPanel1.remove(boxen.get(i));
                    jPanel1.remove(alleA3S1Slider.get(i));
                    jPanel1.remove(alleA3S1Label.get(i));
                    //Entferne die Elemente in den Listen
                    boxen.remove(i);
                    alleA3S1Slider.remove(i);
                    alleA3S1Label.remove(i);
                    //Update die Ansicht des Scrollpanels
                    jScrollPane2.setViewportView(jPanel1);
                } else { //Es wird ein Set fuer SII entfernt
                    //Entferne die Elemente in der GUI
                    jPanel2.remove(boxen.get(i));
                    jPanel2.remove(alleA3S2Slider.get(i));
                    jPanel2.remove(alleA3S2Label.get(i));
                    //Entferne die Elemente in den Listen
                    boxen.remove(i);
                    alleA3S2Slider.remove(i);
                    alleA3S2Label.remove(i);
                    //Update die Ansicht des Scrollpanels
                    jScrollPane3.setViewportView(jPanel2);
                }
            } else {
                for (int k = i; k > 0; k--) { //Suche von hinten an nach einem moeglichen leeren Element
                    if (boxen.get(k - 1).getSelectedIndex() == 0 && boxen.get(k).getSelectedIndex() != 0) { //Das vorkommende Set ist leer aber nicht das momentane
                        boxen.get(k - 1).setSelectedIndex(boxen.get(k).getSelectedIndex());
                        if (boxen == alleA3S1Boxen) { //Es wird ein Set fuer SI entfernt
                            //Uebertrage Daten auf vorheriges Element
                            alleA3S1Slider.get(k - 1).setValue(alleA3S1Slider.get(k).getValue());
                            alleA3S1Label.get(k - 1).setText(alleA3S1Label.get(k).getText());
                            //Entferne die Elemente in der GUI
                            jPanel1.remove(alleA3S1Boxen.get(k));
                            jPanel1.remove(alleA3S1Slider.get(k));
                            jPanel1.remove(alleA3S1Label.get(k));
                            //Entferne die Elemente in den Listen
                            alleA3S1Boxen.remove(k);
                            alleA3S1Slider.remove(k);
                            alleA3S1Label.remove(k);
                            //Nun muessen ggf. die nachfolgenden Elemente nachruecken
                            for (int l = k; l < alleA3S1Boxen.size(); l++) {
                                jPanel1.remove(alleA3S1Boxen.get(l));
                                jPanel1.remove(alleA3S1Slider.get(l));
                                jPanel1.remove(alleA3S1Label.get(l));
                                jPanel1.add(alleA3S1Boxen.get(l), new org.netbeans.lib.awtextra.AbsoluteConstraints(0, alleA3S1Boxen.get(l).getY()-abstandZwischenA3Elementen, 240, -1));
                                jPanel1.add(alleA3S1Slider.get(l), new org.netbeans.lib.awtextra.AbsoluteConstraints(250, alleA3S1Slider.get(l).getY()-abstandZwischenA3Elementen, 115, 20));
                                jPanel1.add(alleA3S1Label.get(l), new org.netbeans.lib.awtextra.AbsoluteConstraints(250, alleA3S1Label.get(l).getY()-abstandZwischenA3Elementen, -1, -1));
                            }
                            //Update die Ansicht des Scrollpanels
                            jScrollPane2.setViewportView(jPanel1);
                            break;
                        } else { //Es wird ein Set fuer SII entfernt
                            //Uebertrage Daten auf vorheriges Element
                            alleA3S2Slider.get(k - 1).setValue(alleA3S2Slider.get(k).getValue());
                            alleA3S2Label.get(k - 1).setText(alleA3S2Label.get(k).getText());
                            //Entferne die Elemente in der GUI
                            jPanel2.remove(boxen.get(k));
                            jPanel2.remove(alleA3S2Slider.get(k));
                            jPanel2.remove(alleA3S2Label.get(k));
                            //Entferne die Elemente in den Listen
                            alleA3S2Boxen.remove(k);
                            alleA3S2Slider.remove(k);
                            alleA3S2Label.remove(k);
                            for (int l = k; l < alleA3S2Boxen.size(); l++) {
                                jPanel2.remove(alleA3S2Boxen.get(l));
                                jPanel2.remove(alleA3S2Slider.get(l));
                                jPanel2.remove(alleA3S2Label.get(l));
                                jPanel2.add(alleA3S2Boxen.get(l), new org.netbeans.lib.awtextra.AbsoluteConstraints(0, alleA3S2Boxen.get(l).getY()-abstandZwischenA3Elementen, 240, -1));
                                jPanel2.add(alleA3S2Slider.get(l), new org.netbeans.lib.awtextra.AbsoluteConstraints(250, alleA3S2Slider.get(l).getY()-abstandZwischenA3Elementen, 115, 20));
                                jPanel2.add(alleA3S2Label.get(l), new org.netbeans.lib.awtextra.AbsoluteConstraints(250, alleA3S2Label.get(l).getY()-abstandZwischenA3Elementen, -1, -1));
                            }
                            //Update die Ansicht des Scrollpanels
                            jScrollPane3.setViewportView(jPanel2);
                            break;
                        }
                    }
                }
            }
        }
    }

    /**
     * Fuegt den JComboBox'en horizontale Rollleisten hinzu.
     *
     * @see https://community.oracle.com/thread/1775495?tstart=0
     * @param box Die JComboBox, die eine horizontale Rolleiste bekommen soll
     */
    private void adjustScrollBar(JComboBox box) {
        if (box.getItemCount() == 0) {
            return;
        }
        Object comp = box.getUI().getAccessibleChild(box, 0);
        if (!(comp instanceof JPopupMenu)) {
            return;
        }
        JPopupMenu popup = (JPopupMenu) comp;
        JScrollPane scrollPane = (JScrollPane) popup.getComponent(0);
        scrollPane.setHorizontalScrollBar(new JScrollBar(JScrollBar.HORIZONTAL));
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
    }

    /**
     * Fuegt dem Programm ein individuelles Icon hinzu und ersetzt das Java-Icon
     */
    private void setzeIcon() {
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/resource/icon.png")));
    }

    /**
     * Aendert die Farbe der Menuleiste
     *
     * @see http://stackoverflow.com/a/15649006
     */
    static public class BackgroundMenuBar extends JMenuBar {

        Color bgColor = new java.awt.Color(255, 255, 255);

        public void setColor(Color color) {
            bgColor = color;
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2d = (Graphics2D) g;
            g2d.setColor(bgColor);
            g2d.fillRect(0, 0, getWidth() - 1, getHeight() - 1);
        }
    }

    /**
     * Benutze einen Renderer, um die Farbe der Tabelle zu aendern (hier zu
     * einem roten Hintergrund und weißer Schrift)
     */
    static public class HeaderColor extends DefaultTableCellRenderer {

        public HeaderColor() {
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable mytable, Object value, boolean selected, boolean focus, int row, int column) {
            super.getTableCellRendererComponent(mytable, value, selected, focus, row, column);
            setBackground(new java.awt.Color(157, 69, 73)); //rot
            setForeground(new java.awt.Color(255, 255, 255)); //weiß
            return this;
        }
    }

    /**
     * Aendere das Aussehen des JSlider thumbs
     *
     * @see http://stackoverflow.com/a/12297384/714968
     */
    public class CustomSliderUI extends BasicSliderUI {

        int color1;
        int color2;
        int color3;
        private BasicStroke stroke = new BasicStroke(1f, BasicStroke.CAP_ROUND,
                BasicStroke.JOIN_ROUND, 0f, new float[]{1f, 2f}, 0f);

        public CustomSliderUI(JSlider b, int c1, int c2, int c3) {
            super(b);
            color1 = c1;
            color2 = c2;
            color3 = c3;
        }

        @Override
        public void paint(Graphics g, JComponent c) {
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
            super.paint(g, c);
        }

        @Override
        protected Dimension getThumbSize() {
            return new Dimension(15, 16);
        }

        @Override
        public void paintThumb(Graphics g) {
            Graphics2D g2d = (Graphics2D) g;
            int x1 = thumbRect.x + 2;
            int x2 = thumbRect.x + thumbRect.width - 2;
            int width = thumbRect.width - 4;
            int topY = thumbRect.y + thumbRect.height / 2 - thumbRect.width / 3;
            GeneralPath shape = new GeneralPath(GeneralPath.WIND_EVEN_ODD);
            shape.moveTo(x1, topY);
            shape.lineTo(x2, topY);
            shape.lineTo((x1 + x2) / 2, topY + width);
            shape.closePath();
            g2d.setPaint(new Color(color1, color2, color3));
            g2d.fill(shape);
            Stroke old = g2d.getStroke();
            g2d.setStroke(new BasicStroke(2f));
            g2d.setPaint(new Color(color1, color2, color3));
            g2d.draw(shape);
            g2d.setStroke(old);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}
